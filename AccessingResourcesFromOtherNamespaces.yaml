# Create the shared-resources namespace
apiVersion: v1
kind: Namespace
metadata:
  name: shared-resources
---
# Create the backend namespace
apiVersion: v1
kind: Namespace
metadata:
  name: backend
---
# ConfigMap in the shared-resources namespace
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-configmap
  namespace: shared-resources
data:
  index.html: |
    <html>
    <head><title>Hello World</title></head>
    <body>
    <h1 style="color: blue;">Hello World!</h1>
    <p>This is a simple page served by Nginx.</p>
    </body>
    </html>
---
# ServiceAccount in the backend namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-service-account
  namespace: backend
---
# Role in the shared-resources namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: shared-resources
  name: configmap-reader
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# RoleBinding in the shared-resources namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-configmap
  namespace: shared-resources
subjects:
- kind: ServiceAccount
  name: example-service-account
  namespace: backend
roleRef:
  kind: Role
  name: configmap-reader
  apiGroup: rbac.authorization.k8s.io
---
# Pod in the backend namespace
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: backend
spec:
  initContainers:
  - name: fetch-config
    image: bitnami/kubectl
    command: ["sh", "-c", "kubectl get configmap example-configmap -n shared-resources -o jsonpath='{.data.index\\.html}' > /usr/share/nginx/html/index.html"]
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html
  volumes:
  - name: shared-data
    emptyDir: {}
  serviceAccountName: example-service-account
